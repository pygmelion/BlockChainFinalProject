package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Receipy extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"BankUserAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"logAllReceipy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_newTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferReceipy\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreateReceipy\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deleteReceipy\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receipy2BankMoney\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BankAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receipy2Money\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ifBelief\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"fromAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refreshReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ifPass\",\"type\":\"bool\"}],\"name\":\"createReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ifPass\",\"type\":\"bool\"}],\"name\":\"deleteReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ifBelief\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"fromAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_log\",\"type\":\"string\"}],\"name\":\"transferReceipyFailedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ifBelief\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"oriFromAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oriToAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isOriDeleted\",\"type\":\"bool\"}],\"name\":\"transferReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_log\",\"type\":\"string\"}],\"name\":\"payForReceipyErrorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPayAll\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"fromAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payForReceipyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_log\",\"type\":\"string\"}],\"name\":\"bankHelpErrorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fromAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"toAdd\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bankHelpEvent\",\"type\":\"event\"}]";

    public static final String FUNC_BANKUSERADD = "BankUserAdd";

    public static final String FUNC_LOGALLRECEIPY = "logAllReceipy";

    public static final String FUNC_TRANSFERRECEIPY = "transferReceipy";

    public static final String FUNC_CREATERECEIPY = "CreateReceipy";

    public static final String FUNC_NUMBER = "number";

    public static final String FUNC_DELETERECEIPY = "deleteReceipy";

    public static final String FUNC_RECEIPY2BANKMONEY = "receipy2BankMoney";

    public static final String FUNC_BANKADD = "BankAdd";

    public static final String FUNC_RECEIPY2MONEY = "receipy2Money";

    public static final Event REFRESHRECEIPYEVENT_EVENT = new Event("refreshReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CREATERECEIPYEVENT_EVENT = new Event("createReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DELETERECEIPYEVENT_EVENT = new Event("deleteReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event LOGRECEIPYEVENT_EVENT = new Event("logReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERRECEIPYFAILEDEVENT_EVENT = new Event("transferReceipyFailedEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFERRECEIPYEVENT_EVENT = new Event("transferReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAYFORRECEIPYERROREVENT_EVENT = new Event("payForReceipyErrorEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event PAYFORRECEIPYEVENT_EVENT = new Event("payForReceipyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BANKHELPERROREVENT_EVENT = new Event("bankHelpErrorEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event BANKHELPEVENT_EVENT = new Event("bankHelpEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Receipy(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Receipy(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Receipy(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Receipy(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> BankUserAdd() {
        final Function function = new Function(FUNC_BANKUSERADD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> logAllReceipy(String _add) {
        final Function function = new Function(
                FUNC_LOGALLRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_add)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void logAllReceipy(String _add, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_LOGALLRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_add)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String logAllReceipySeq(String _add) {
        final Function function = new Function(
                FUNC_LOGALLRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_add)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferReceipy(String _from, String _to, String _newTo, BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_newTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferReceipy(String _from, String _to, String _newTo, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_newTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferReceipySeq(String _from, String _to, String _newTo, BigInteger _amount) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_newTo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> CreateReceipy(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_CREATERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void CreateReceipy(String _from, String _to, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String CreateReceipySeq(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_CREATERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> number() {
        final Function function = new Function(FUNC_NUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deleteReceipy(String _from, String _to) {
        final Function function = new Function(
                FUNC_DELETERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteReceipy(String _from, String _to, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deleteReceipySeq(String _from, String _to) {
        final Function function = new Function(
                FUNC_DELETERECEIPY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> receipy2BankMoney(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_RECEIPY2BANKMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void receipy2BankMoney(String _from, String _to, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RECEIPY2BANKMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String receipy2BankMoneySeq(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_RECEIPY2BANKMONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> BankAdd() {
        final Function function = new Function(FUNC_BANKADD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> receipy2Money(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_RECEIPY2MONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void receipy2Money(String _from, String _to, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RECEIPY2MONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String receipy2MoneySeq(String _from, String _to, BigInteger _amount) {
        final Function function = new Function(
                FUNC_RECEIPY2MONEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<RefreshReceipyEventEventResponse> getRefreshReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REFRESHRECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<RefreshReceipyEventEventResponse> responses = new ArrayList<RefreshReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefreshReceipyEventEventResponse typedResponse = new RefreshReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ifBelief = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromAdd = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.toAdd = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerrefreshReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REFRESHRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerrefreshReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REFRESHRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateReceipyEventEventResponse> getCreateReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<CreateReceipyEventEventResponse> responses = new ArrayList<CreateReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateReceipyEventEventResponse typedResponse = new CreateReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ifPass = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATERECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATERECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<DeleteReceipyEventEventResponse> getDeleteReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETERECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<DeleteReceipyEventEventResponse> responses = new ArrayList<DeleteReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteReceipyEventEventResponse typedResponse = new DeleteReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ifPass = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerdeleteReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DELETERECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerdeleteReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DELETERECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<LogReceipyEventEventResponse> getLogReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGRECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<LogReceipyEventEventResponse> responses = new ArrayList<LogReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogReceipyEventEventResponse typedResponse = new LogReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ifBelief = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromAdd = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.toAdd = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerlogReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerlogReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOGRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferReceipyFailedEventEventResponse> getTransferReceipyFailedEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERRECEIPYFAILEDEVENT_EVENT, transactionReceipt);
        ArrayList<TransferReceipyFailedEventEventResponse> responses = new ArrayList<TransferReceipyFailedEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferReceipyFailedEventEventResponse typedResponse = new TransferReceipyFailedEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._log = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransferReceipyFailedEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPYFAILEDEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransferReceipyFailedEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPYFAILEDEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferReceipyEventEventResponse> getTransferReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERRECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<TransferReceipyEventEventResponse> responses = new ArrayList<TransferReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferReceipyEventEventResponse typedResponse = new TransferReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ifBelief = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oriFromAdd = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.oriToAdd = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toAdd = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.isOriDeleted = (Boolean) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertransferReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertransferReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFERRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<PayForReceipyErrorEventEventResponse> getPayForReceipyErrorEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYFORRECEIPYERROREVENT_EVENT, transactionReceipt);
        ArrayList<PayForReceipyErrorEventEventResponse> responses = new ArrayList<PayForReceipyErrorEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayForReceipyErrorEventEventResponse typedResponse = new PayForReceipyErrorEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._log = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerpayForReceipyErrorEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYFORRECEIPYERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerpayForReceipyErrorEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYFORRECEIPYERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<PayForReceipyEventEventResponse> getPayForReceipyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYFORRECEIPYEVENT_EVENT, transactionReceipt);
        ArrayList<PayForReceipyEventEventResponse> responses = new ArrayList<PayForReceipyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayForReceipyEventEventResponse typedResponse = new PayForReceipyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.isPayAll = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromAdd = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.toAdd = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerpayForReceipyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYFORRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerpayForReceipyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PAYFORRECEIPYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BankHelpErrorEventEventResponse> getBankHelpErrorEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BANKHELPERROREVENT_EVENT, transactionReceipt);
        ArrayList<BankHelpErrorEventEventResponse> responses = new ArrayList<BankHelpErrorEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BankHelpErrorEventEventResponse typedResponse = new BankHelpErrorEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._log = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerbankHelpErrorEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKHELPERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerbankHelpErrorEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKHELPERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BankHelpEventEventResponse> getBankHelpEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BANKHELPEVENT_EVENT, transactionReceipt);
        ArrayList<BankHelpEventEventResponse> responses = new ArrayList<BankHelpEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BankHelpEventEventResponse typedResponse = new BankHelpEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromAdd = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toAdd = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerbankHelpEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKHELPEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerbankHelpEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BANKHELPEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Receipy load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Receipy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Receipy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Receipy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Receipy load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Receipy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Receipy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Receipy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Receipy> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Receipy.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Receipy> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Receipy.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Receipy> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Receipy.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Receipy> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Receipy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class RefreshReceipyEventEventResponse {
        public Log log;

        public Boolean ifBelief;

        public String fromAdd;

        public String toAdd;

        public BigInteger amount;
    }

    public static class CreateReceipyEventEventResponse {
        public Log log;

        public Boolean ifPass;
    }

    public static class DeleteReceipyEventEventResponse {
        public Log log;

        public Boolean ifPass;
    }

    public static class LogReceipyEventEventResponse {
        public Log log;

        public Boolean ifBelief;

        public String fromAdd;

        public String toAdd;

        public BigInteger amount;
    }

    public static class TransferReceipyFailedEventEventResponse {
        public Log log;

        public String _log;
    }

    public static class TransferReceipyEventEventResponse {
        public Log log;

        public Boolean ifBelief;

        public String oriFromAdd;

        public String oriToAdd;

        public String toAdd;

        public BigInteger amount;

        public Boolean isOriDeleted;
    }

    public static class PayForReceipyErrorEventEventResponse {
        public Log log;

        public String _log;
    }

    public static class PayForReceipyEventEventResponse {
        public Log log;

        public Boolean isPayAll;

        public String fromAdd;

        public String toAdd;

        public BigInteger amount;
    }

    public static class BankHelpErrorEventEventResponse {
        public Log log;

        public String _log;
    }

    public static class BankHelpEventEventResponse {
        public Log log;

        public String fromAdd;

        public String toAdd;

        public BigInteger amount;
    }
}
